name: Unified CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: read

env:
  BUILD_TYPE: Release

jobs:
  # Step 1: Build Application (Linux)
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libgtest-dev

    - name: Configure CMake
      run: |
        # Extract version from git tag if this is a tag build, otherwise use development version
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          VERSION="${GITHUB_REF#refs/tags/}"
          # Remove 'v' prefix if present (e.g., v0.2.4 -> 0.2.4)
          VERSION="${VERSION#v}"
          echo "Building tagged version: $VERSION"
          cmake --preset release -DPROJECT_VERSION_OVERRIDE="$VERSION"
        else
          echo "Building development version: 0.0.0"
          cmake --preset release
        fi

    - name: Build
      run: |
        cmake --build --preset release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ddogreen-build-linux
        path: |
          build/release/ddogreen
          build/release/tests/test_config

  # Step 1b: Build Application (Windows)
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2

    - name: Install NSIS
      run: |
        choco install nsis -y
        # Add NSIS to PATH
        echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Configure CMake (Windows)
      run: |
        # Extract version from git tag if this is a tag build, otherwise use development version
        if ($env:GITHUB_REF -like "refs/tags/*") {
          $VERSION = $env:GITHUB_REF -replace "refs/tags/", ""
          # Remove 'v' prefix if present (e.g., v0.2.4 -> 0.2.4)
          $VERSION = $VERSION -replace "^v", ""
          Write-Host "Building tagged version: $VERSION"
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DPROJECT_VERSION_OVERRIDE="$VERSION"
        } else {
          Write-Host "Building development version: 0.0.0"
          cmake -B build -DCMAKE_BUILD_TYPE=Release
        }

    - name: Build (Windows)
      run: |
        cmake --build build --config Release

    - name: Upload Windows build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ddogreen-build-windows
        path: |
          build/Release/ddogreen.exe

  # Step 2: Test Application (Linux)
  test-linux:
    needs: build-linux
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libgtest-dev

    - name: Test with standard CMake (backward compatibility)
      run: |
        echo "=== Testing Standard CMake Build ==="
        cmake -B build-test -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON
        cmake --build build-test -j$(nproc)
        
        echo "=== Running Standard CMake Tests ==="
        cd build-test
        ctest --output-on-failure --verbose

    - name: Test with CMake presets (current workflow)
      run: |
        echo "=== Testing Debug Preset ==="
        cmake --preset debug
        cmake --build --preset debug
        ctest --preset debug-tests

        echo "=== Testing Release Preset ==="
        cmake --preset release
        cmake --build --preset release
        ctest --preset release-tests

    - name: Test executable functionality
      run: |
        echo "=== Testing Binary Functionality ==="
        ./build/release/ddogreen --help
        ./build/release/ddogreen --version

  # Step 2b: Test Application (Windows)
  test-windows:
    needs: build-windows
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2

    - name: Download Windows build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ddogreen-build-windows
        path: build/Release/

    - name: Test Windows executable functionality
      run: |
        Write-Host "=== Testing Windows Binary Functionality ==="
        .\build\Release\ddogreen.exe --help
        .\build\Release\ddogreen.exe --version

  # Step 3: Package Building (Linux)
  package-linux:
    needs: [build-linux, test-linux]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install packaging dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake rpm dpkg-dev libgtest-dev

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ddogreen-build-linux
        path: build/release/

    - name: Make binary executable
      run: |
        chmod +x build/release/ddogreen

    - name: Configure CMake for packaging
      run: |
        # Extract version from git tag if this is a tag build, otherwise use development version
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          VERSION="${GITHUB_REF#refs/tags/}"
          # Remove 'v' prefix if present (e.g., v0.2.4 -> 0.2.4)
          VERSION="${VERSION#v}"
          echo "Building tagged version: $VERSION"
          # Configure release preset with version override for packaging
          cmake --preset release -DPROJECT_VERSION_OVERRIDE="$VERSION"
        else
          echo "Building development version: 0.0.0"
          # Configure release preset with default version
          cmake --preset release
        fi

    - name: Create packages
      run: |
        cd build/release
        cpack -G DEB
        cpack -G RPM
        cpack -G TGZ

    - name: Upload DEB package
      uses: actions/upload-artifact@v4
      with:
        name: ddogreen-deb
        path: build/release/*.deb

    - name: Upload RPM package
      uses: actions/upload-artifact@v4
      with:
        name: ddogreen-rpm
        path: build/release/*.rpm

    - name: Upload TGZ package
      uses: actions/upload-artifact@v4
      with:
        name: ddogreen-tgz
        path: build/release/*.tar.gz

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: ddogreen-binary-linux
        path: build/release/ddogreen

  # Step 3b: Package Building (Windows)
  package-windows:
    needs: [build-windows, test-windows]
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2

    - name: Install NSIS
      run: |
        choco install nsis -y
        # Add NSIS to PATH
        echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Download Windows build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ddogreen-build-windows
        path: build/Release/

    - name: Configure CMake for Windows packaging
      run: |
        # Extract version from git tag if this is a tag build, otherwise use development version
        if ($env:GITHUB_REF -like "refs/tags/*") {
          $VERSION = $env:GITHUB_REF -replace "refs/tags/", ""
          # Remove 'v' prefix if present (e.g., v0.2.4 -> 0.2.4)
          $VERSION = $VERSION -replace "^v", ""
          Write-Host "Building tagged version: $VERSION"
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DPROJECT_VERSION_OVERRIDE="$VERSION"
        } else {
          Write-Host "Building development version: 0.0.0"
          cmake -B build -DCMAKE_BUILD_TYPE=Release
        }

    - name: Create Windows packages
      run: |
        cd build
        cpack -G NSIS
        cpack -G ZIP

    - name: Upload Windows NSIS installer
      uses: actions/upload-artifact@v4
      with:
        name: ddogreen-windows-installer
        path: build/*.exe

    - name: Upload Windows ZIP package
      uses: actions/upload-artifact@v4
      with:
        name: ddogreen-windows-zip
        path: build/*.zip

    - name: Upload Windows binary
      uses: actions/upload-artifact@v4
      with:
        name: ddogreen-binary-windows
        path: build/Release/ddogreen.exe

  # Step 4: Package Validation (Sequential)
  validate-deb:
    needs: package-linux
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download DEB package
      uses: actions/download-artifact@v4
      with:
        name: ddogreen-deb

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tlp

    - name: Test DEB package
      run: |
        echo "=== Testing DEB Package Installation ==="

        # Install package
        sudo dpkg -i *.deb || sudo apt-get install -f -y

        # Verify installation
        echo "Checking if ddogreen is installed..."
        which ddogreen || command -v ddogreen
        ddogreen --version

        # Check if files are in correct locations
        test -f /usr/bin/ddogreen
        test -f /usr/share/ddogreen/ddogreen.conf.default

        # Test service functionality (don't start daemon in CI)
        sudo ddogreen --help

        # Verify service was installed automatically by DEB package
        echo "Verifying service installation..."
        test -f /etc/systemd/system/ddogreen.service
        echo "Service file created successfully by package installation"

        # Validate service file syntax (if systemd-analyze is available)
        if command -v systemd-analyze >/dev/null 2>&1; then
            systemd-analyze verify /etc/systemd/system/ddogreen.service && echo "Service file syntax is valid"
        else
            echo "systemd-analyze not available, skipping service file validation"
        fi

        echo "=== Testing DEB Package Removal ==="
        # Remove package (DEB removal is handled by package manager)
        sudo apt-get remove -y ddogreen

        # Verify removal
        ! which ddogreen 2>/dev/null && ! command -v ddogreen 2>/dev/null || echo "WARNING: ddogreen still found after removal"
        ! test -f /usr/bin/ddogreen || echo "WARNING: binary still exists after removal"

  validate-rpm:
    needs: package-linux
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download RPM package
      uses: actions/download-artifact@v4
      with:
        name: ddogreen-rpm

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y rpm2cpio cpio

    - name: Test RPM package structure
      run: |
        echo "=== Testing RPM Package Structure ==="

        # Extract RPM contents without installing
        rpm2cpio *.rpm | cpio -idmv

        # Verify expected files exist in extracted contents
        echo "Checking extracted RPM contents:"
        find . -name "ddogreen" -type f
        find . -name "*.conf*" -type f

        # Test binary functionality
        DDOGREEN_BIN=$(find . -name "ddogreen" -type f | head -1)
        if [[ -n "$DDOGREEN_BIN" ]]; then
            echo "Found ddogreen executable: $DDOGREEN_BIN"
            chmod +x "$DDOGREEN_BIN"
            "$DDOGREEN_BIN" --help
            "$DDOGREEN_BIN" --version
        else
            echo "ERROR: ddogreen binary not found in RPM"
            exit 1
        fi

        echo "RPM package structure validation completed"

  validate-tgz:
    needs: package-linux
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download TGZ package
      uses: actions/download-artifact@v4
      with:
        name: ddogreen-tgz

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tlp

    - name: Test TGZ package
      run: |
        echo "=== Testing TGZ Package Installation ==="

        # Extract package
        tar -xzf *.tar.gz
        cd ddogreen-*/

        # List contents to verify structure
        echo "Package contents:"
        find . -type f | sort

        # Verify required files exist
        test -f install.sh
        test -x install.sh
        # Binary should be in bin/ directory (CPack structure)
        test -f bin/ddogreen || test -f ddogreen

        # Install using install script
        sudo ./install.sh --install

        # Verify installation
        echo "Checking if ddogreen is installed..."
        which ddogreen || command -v ddogreen
        ddogreen --version

        # Check if files are in correct locations
        test -f /usr/local/bin/ddogreen
        test -d /etc/ddogreen

        # Test service functionality
        ddogreen --help

        # Verify service file was created by install script
        echo "Verifying service installation..."
        test -f /etc/systemd/system/ddogreen.service
        echo "Service file created successfully by install script"

        # Validate service file syntax (if systemd-analyze is available)
        if command -v systemd-analyze >/dev/null 2>&1; then
            systemd-analyze verify /etc/systemd/system/ddogreen.service && echo "Service file syntax is valid"
        else
            echo "systemd-analyze not available, skipping service file validation"
        fi

        echo "=== Testing TGZ Package Removal ==="
        # Uninstall using install script (TGZ packages use install.sh --uninstall)
        sudo ./install.sh --uninstall

        # Verify removal
        ! which ddogreen 2>/dev/null && ! command -v ddogreen 2>/dev/null || echo "WARNING: ddogreen still found after removal"
        ! test -f /usr/local/bin/ddogreen || echo "WARNING: binary still exists after removal"

  # Step 4b: Windows Package Validation
  validate-windows-installer:
    needs: package-windows
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Windows installer
      uses: actions/download-artifact@v4
      with:
        name: ddogreen-windows-installer

    - name: Test Windows NSIS installer structure
      run: |
        Write-Host "=== Testing Windows NSIS Installer ==="
        
        # List installer files
        Get-ChildItem *.exe | ForEach-Object { 
          Write-Host "Found installer: $($_.Name)"
          Write-Host "Size: $($_.Length) bytes"
        }
        
        # Note: We can't actually install and test on GitHub Actions Windows runner
        # due to admin restrictions, but we can verify the installer was created
        Write-Host "Windows installer validation completed - installer file created successfully"

  validate-windows-zip:
    needs: package-windows  
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Windows ZIP package
      uses: actions/download-artifact@v4
      with:
        name: ddogreen-windows-zip

    - name: Test Windows ZIP package
      run: |
        Write-Host "=== Testing Windows ZIP Package ==="

        # Extract ZIP package
        $zipFile = Get-ChildItem *.zip | Select-Object -First 1
        Write-Host "Extracting: $($zipFile.Name)"
        Expand-Archive -Path $zipFile.FullName -DestinationPath "extracted" -Force

        # List contents to verify structure
        Write-Host "Package contents:"
        Get-ChildItem -Recurse extracted | Sort-Object FullName

        # Look for ddogreen.exe
        $executable = Get-ChildItem -Recurse extracted -Name "ddogreen.exe" | Select-Object -First 1
        if ($executable) {
            Write-Host "Found ddogreen.exe: $executable"
            $exePath = Join-Path "extracted" $executable
            
            # Test executable functionality
            Write-Host "Testing executable functionality..."
            & $exePath --help
            & $exePath --version
        } else {
            Write-Host "ERROR: ddogreen.exe not found in ZIP package"
            exit 1
        }

        Write-Host "Windows ZIP package validation completed"

  # Step 5: Create Release (only on tags)
  release:
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push'
    needs: [build-linux, test-linux, package-linux, validate-deb, validate-rpm, validate-tgz, build-windows, test-windows, package-windows, validate-windows-installer, validate-windows-zip]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Prepare versioned release files
      run: |
        mkdir -p release-files

        # Extract version from tag
        VERSION="${GITHUB_REF#refs/tags/}"
        echo "Creating release files for version: $VERSION"

        # Copy and rename Linux files with version
        cp ddogreen-deb/*.deb "release-files/ddogreen-${VERSION}-linux.deb"
        cp ddogreen-rpm/*.rpm "release-files/ddogreen-${VERSION}-linux.rpm"
        cp ddogreen-tgz/*.tar.gz "release-files/ddogreen-${VERSION}-linux.tar.gz"
        cp ddogreen-binary-linux/ddogreen "release-files/ddogreen-${VERSION}-linux-x64"

        # Copy and rename Windows files with version
        cp ddogreen-windows-installer/*.exe "release-files/ddogreen-${VERSION}-windows-installer.exe"
        cp ddogreen-windows-zip/*.zip "release-files/ddogreen-${VERSION}-windows.zip"
        cp ddogreen-binary-windows/ddogreen.exe "release-files/ddogreen-${VERSION}-windows-x64.exe"

        # Create checksums
        cd release-files
        sha256sum * > checksums.txt

        echo "=== Release Files ==="
        ls -lah

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release-files/*
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## ddogreen ${{ github.ref_name }}

          ### Installation Options

          #### Windows (MSI Installer)
          ```powershell
          # Download and run the installer
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/ddogreen-${{ github.ref_name }}-windows-installer.exe" -OutFile "ddogreen-installer.exe"
          .\ddogreen-installer.exe
          # Follow the installation wizard
          ```

          #### Windows (Portable ZIP)
          ```powershell
          # Download and extract
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/ddogreen-${{ github.ref_name }}-windows.zip" -OutFile "ddogreen-windows.zip"
          Expand-Archive -Path "ddogreen-windows.zip" -DestinationPath "ddogreen"
          cd ddogreen
          .\bin\ddogreen.exe --help
          ```

          #### Debian/Ubuntu (DEB Package)
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/ddogreen-${{ github.ref_name }}-linux.deb
          sudo dpkg -i ddogreen-${{ github.ref_name }}-linux.deb
          sudo apt install -f  # Fix dependencies if needed
          ```

          #### RHEL/CentOS/Fedora (RPM Package)
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/ddogreen-${{ github.ref_name }}-linux.rpm
          sudo rpm -i ddogreen-${{ github.ref_name }}-linux.rpm
          # or: sudo dnf install ddogreen-${{ github.ref_name }}-linux.rpm
          ```

          #### Generic Linux (TGZ Package)
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/ddogreen-${{ github.ref_name }}-linux.tar.gz
          tar -xzf ddogreen-${{ github.ref_name }}-linux.tar.gz
          cd ddogreen-*/
          sudo ./install.sh --install
          ```

          #### Standalone Binaries
          ```bash
          # Linux
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/ddogreen-${{ github.ref_name }}-linux-x64
          chmod +x ddogreen-${{ github.ref_name }}-linux-x64
          sudo ./ddogreen-${{ github.ref_name }}-linux-x64 --help
          ```

          ```powershell
          # Windows
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/ddogreen-${{ github.ref_name }}-windows-x64.exe" -OutFile "ddogreen.exe"
          .\ddogreen.exe --help
          ```

          ### Requirements

          #### Linux Requirements
          - Linux with systemd
          - TLP installed (`sudo apt install tlp` / `sudo dnf install tlp`)
          - Root privileges for installation

          #### Windows Requirements  
          - Windows 10/11 or Windows Server 2016+
          - Administrator privileges for service installation
          - PowerShell (pre-installed on modern Windows)

          ### Service Management

          #### Linux (systemd)
          ```bash
          sudo systemctl status ddogreen      # Check status
          sudo systemctl stop ddogreen       # Stop service
          sudo systemctl start ddogreen      # Start service
          sudo journalctl -u ddogreen -f     # View logs
          ```

          #### Windows (Service Control Manager)
          ```powershell
          # Check service status
          Get-Service ddogreen
          sc query ddogreen

          # Start/stop service
          Start-Service ddogreen
          Stop-Service ddogreen

          # View Windows Event Log
          Get-WinEvent -LogName Application -Source ddogreen
          ```

          ### Verify Installation
          All packages automatically install and start the service. The service will manage your system's power automatically with no configuration required.

          **Note**: Linux packages (DEB and TGZ) are fully tested in CI. RPM and Windows packages are structure-validated but not installation-tested in CI.
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
