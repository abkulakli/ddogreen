name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  ci-linux:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build_type: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Configure CMake with tests
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTS=ON

    - name: Build
      run: |
        cmake --build build --config ${{ matrix.build_type }} -j$(nproc)

    - name: Run unit tests
      run: |
        cd build && ctest --output-on-failure --verbose

    - name: Test executable
      run: |
        ./build/ddogreen --help
        ./build/ddogreen --version

    - name: Check binary size
      if: matrix.build_type == 'Release'
      run: |
        echo "=== Binary Information ==="
        ls -lh build/ddogreen
        file build/ddogreen
        ldd build/ddogreen || true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.build_type }}
        path: |
          build/Testing/
          build/tests/test_config
        
    - name: Verify hardcoded settings
      run: |
        echo "=== Checking for hardcoded values ==="
        strings build/ddogreen | grep -E "(0\.10|60|/var/log/ddogreen\.log)" || true

  build-script-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Test build script - clean
      run: |
        ./build.sh --clean

    - name: Test build script - debug
      run: |
        ./build.sh --debug

    - name: Test build script - release  
      run: |
        ./build.sh --clean
        ./build.sh

    - name: Build with tests for validation
      run: |
        cmake -B test-build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON
        cmake --build test-build -j$(nproc)
        
    - name: Run tests (will fail build if tests fail)
      run: |
        cd test-build && ctest --output-on-failure --verbose

    - name: Test CMake presets
      run: |
        cmake --preset with-tests
        cmake --build --preset with-tests
        ctest --preset default --output-on-failure

    - name: Test build script - package creation
      run: |
        sudo apt-get install -y rpm
        ./build.sh --package

    - name: Verify package creation
      run: |
        echo "=== Created packages ==="
        find build -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" | sort
        
        # Show package sizes
        find build -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" -exec ls -lh {} \;
